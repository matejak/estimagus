{% macro render_whatever_retro(target) %}
{% if target.dependents %}
{{ render_epic_retro(target) }}
{% else %}
{{ target.title }} {{ target.status }}
{% endif %}
{% endmacro %}

{% macro render_epic_retro(epic) %}
        {{ epic_link(epic, "main.view_epic_retro") }} &mdash; {{ epic.title }}
            {% for target in epic.dependents %}
        <ul>
            <li>
            {{- render_whatever_retro(target) -}}
            </li>
        </ul>
            {% endfor %}
{% endmacro %}

{% macro render_whatever(target, model) %}
{% if target.dependents %}
{{ render_epic(target, model) }}
{% else %}
{{ render_task(target, model) }}
{% endif %}
{% endmacro %}

{% macro task_link(task) -%}
        <a href="{{ url_for("main.view_task", task_name=task.name) }}">{{ task.name }}</a>
{%- endmacro %}

{% macro epic_link(epic, endpoint="main.view_epic") -%}
        <a href="{{ url_for(endpoint, epic_name=epic.name) }}">{{ epic.name }}</a>
{%- endmacro %}

{% macro render_state_short(state) -%}
        <span class="state.style_class">state.shortcut</span>
{%- endmacro %}

{% macro render_state(state) -%}
        <span class="state.style_class">state.name</span>
{%- endmacro %}

{% macro render_task_basic(task, model) -%}
        {{ task_link(task) }} &mdash; <span class="task-state">{{ state_to_string(task.state) }}</span><span class="task-points {{- " uncounted_points" if model and model.get_element(task.name).masked }}">{{ "%.2g" % task.point_cost }}</span><span class="d-inline-block text-truncate" style="max-width: 350pt;">{{ task.title }}</span>
{%- endmacro %}

{% macro render_task(task, model) %}
        <li>
        {{- render_task_basic(task, model) -}}
        </li>
{% endmacro %}

{% macro render_epic_basic(epic) %}
        {{ epic_link(epic) }} &mdash; {{ epic.title }}
{% endmacro %}

{% macro render_epic(epic, model) %}
        <li>
        {{ render_epic_basic(epic) }}
        <p>
        Left to do: {{ "%.3g" % model.point_estimate_of(epic.name).expected }}, i.e. {{ "%.2g %%" % (model.point_estimate_of(epic.name).expected / model.point_estimate.expected * 100) }} of the whole
        </p>
        <ul>
            {% for target in epic.dependents %}
            {{- render_whatever(target, model) -}}
            {% endfor %}
        </ul>
        </li>
{% endmacro %}

{% macro render_estimate(estimate, unit="") -%}
	{{ "{expected:.3g}{unit_with_space}, ùúé = {sigma:.2g}{unit_with_space}".format(
		expected=estimate.expected, sigma=estimate.sigma, unit_with_space=" " ~ unit) }}
{%- endmacro %}


{% macro task_metadata(task) -%}
<h2>{{ task.title }}</h2>
<div>State: {{ task.state  }}</div>
<h3>Description</h3>
<div>{{ (task.description | escape) or "No description" }}</div>
{%- endmacro %}


{% macro render_similar_sized_tasks(similar_sized_tasks, similar_sized_targets) -%}
    <div class="row">
    <h4>Tasks of similar sizes</h4>
    <p>
    <ul>
    {%- for index in range(similar_sized_tasks | length) %}
    <li>{{ render_task_basic(similar_sized_targets[index], None) }}: {{ render_estimate(similar_sized_tasks[index].point_estimate) }}</li>
    {%- endfor %}
    </ul>
    </p>
    </div>
{%- endmacro %}


{% set states_table = {
    State.todo: "To Do",
    State.in_progress: "In Progress",
    State.review: "Needs Peer Review",
    State.done: "Done",
    State.abandoned: "Abandoned",
} %}


{% macro state_to_string(state) -%}
    {{ states_table.get(state, "Unknown") }}
{%- endmacro %}
